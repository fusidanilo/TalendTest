package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ParserOld {

    /**
     * parseAreaOfInterest: it parses the AreaOfInterest field.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("00") input: The area of interest field.
     * 
     * {example} parseAreaOfInterest(""): "".
     */
    public static String parseAreaOfInterest(String message) {
    	String newValue = message;
    	StringBuilder stringBuilder = new StringBuilder();
    	//Check string length
    	if (message.length() == 0 || message == null)
    		return "";
    	if (message.length() % 2 == 1){
    		newValue = (new StringBuilder(message)).insert(0, '0').toString();
    	}
    	
    	//Parse newValue
    	for(int i = 0; i < newValue.length(); i = i + 2){
    		String temp = getAreaOfInterestValue(newValue.substring(i, i + 2));
    		if (temp != ""){
    			stringBuilder.append(temp);
    			stringBuilder.append(";");
    		}
    	}
    	return stringBuilder.toString();
    }
    	
    private static String getAreaOfInterestValue(String value){
    	switch(value){
    	case "01":
    		return "American/US Law/Legal System";
    	case "02":
    		return "As Approved";
    	case "03":
    		return "Business/Corporate Law";
    	case "04":
    		return "Comparative Law";
    	case "05":
    		return "Criminal Law";
    	case "06":
    		return "Labor/Employment Law";
    	case "07":
    		return "Sports/Entertainment Law";
    	case "08":
    		return "Environmental/Energy/Natural Resources Law";
    	case "09":
    		return "Family/Juvenile Law";
    	case "10":
    		return "General";
    	case "11":
    		return "State/Local Governance Law";
    	case "12":
    		return "Health Law";
    	case "13":
    		return "Civil/Human Rights Law";
    	case "14":
    		return "International Law";
    	case "15":
    		return "Jurisprudence and Legal Theory";
    	case "16":
    		return "Admiralty Law";
    	case "17":
    		return "Other";
    	case "18":
    		return "Real Estate Law";
    	case "19":
    		return "Intellectual Property/Technology Law";
    	case "20":
    		return "Tax and Estate Planning";
    	case "21":
    		return "Banking/Finance/Securities Law";
    	case "22":
    		return "Native American/Indigenous Law";
    	case "23":
    		return "Bankruptcy Law";
    	case "24":
    		return "Dispute Resolution";
    	case "25":
    		return "Immigration Law";
    	case "26":
    		return "Litigation/Advocacy";
		default:
    		return "";
    	}
    }
}
