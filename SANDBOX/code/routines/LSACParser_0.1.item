package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class LSACParser {

    /**
	* parseAreaOfInterest: it parses the AreaOfInterest field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("00") input: The area of interest field.
	* 
	* {example} parseAreaOfInterest(""): "".
	*/
	public static String parseAreaOfInterest(String message) {
		String newValue = message;
		StringBuilder stringBuilder = new StringBuilder();
		//Check string length
		if (message == null)
			return "";
		if (message.length() == 0)
			return "";
		if (message.length() % 2 == 1){
			newValue = (new StringBuilder(message)).insert(0, '0').toString();
		}
		
		//Parse newValue
		for(int i = 0; i < newValue.length(); i = i + 2){
			String temp = getAreaOfInterestValue(newValue.substring(i, i + 2));
			if (temp != ""){
				stringBuilder.append(temp);
				stringBuilder.append(";");
			}
		}
		return stringBuilder.toString();
	}
	
	private static String getAreaOfInterestValue(String value){
		switch(value){
		case "01":
			return "American/US Law/Legal System";
		case "02":
			return "As Approved";
		case "03":
			return "Business/Corporate Law";
		case "04":
			return "Comparative Law";
		case "05":
			return "Criminal Law";
		case "06":
			return "Labor/Employment Law";
		case "07":
			return "Sports/Entertainment Law";
		case "08":
			return "Environmental/Energy/Natural Resources Law";
		case "09":
			return "Family/Juvenile Law";
		case "10":
			return "General";
		case "11":
			return "State/Local Governance Law";
		case "12":
			return "Health Law";
		case "13":
			return "Civil/Human Rights Law";
		case "14":
			return "International Law";
		case "15":
			return "Jurisprudence and Legal Theory";
		case "16":
			return "Admiralty Law";
		case "17":
			return "Other";
		case "18":
			return "Real Estate Law";
		case "19":
			return "Intellectual Property/Technology Law";
		case "20":
			return "Tax and Estate Planning";
		case "21":
			return "Banking/Finance/Securities Law";
		case "22":
			return "Native American/Indigenous Law";
		case "23":
			return "Bankruptcy Law";
		case "24":
			return "Dispute Resolution";
		case "25":
			return "Immigration Law";
		case "26":
			return "Litigation/Advocacy";
			default:
			return "";
		}
	}
	
    /**
	* parseEthnicity: it parses the Ethnicity field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("AT") input: The Ethnicity field.
	* 
	* {example} parseEthnicity(""): "".
	*/
	public static String parseEthnicity(String field) {
		switch (field){
		case "AT":
			return "Aboriginal or Torres Strait Islander Australian";
		case "AI":
			return "American Indian or Alaska Native";
		case "AS":
			return "Asian";
		case "BA":
			return "Black or African American";
		case "CW":
			return "Caucasian";
		case "CD":
			return "Canadian Aboriginal";
		case "HS":
			return "Hispanic/Latino";
		case "NH":
			return "Native Hawaiian/Other Pacific Islander";
		case "PR":
			return "Puerto Rican";
		default:
			return "";
		}
	}
	
    /**
	* parseAcademicIndicator: it parses the Academic Indicator field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The Academic Indicator field.
	* 
	* {example} parseAcademicIndicator(""): "".
	*/
	public static String parseAcademicIndicator(String field) {
		switch (field){
		case "1":
			return "Superior";
		case "2":
			return "Above Average";
		case "3":
			return "Average";
		case "4":
			return "Below Average";
		default:
			return "";
		}
	}
	
    /**
	* parseSelfReportedGPA: it parses the Self Reported GPA field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The Self Reported GPA field.
	* 
	* {example} parseSelfReportedGPA(""): "".
	*/
	public static String parseSelfReportedGPA(String field) {
		switch (field){
		case "0":
			return "";
		case "1":
			return "3.75 and up";
		case "2":
			return "3.50 to 3.74";
		case "3":
			return "3.00 to 3.49";
		case "4":
			return "2.50 to 2.99";
		case "5":
			return "2.00 to 2.49";
		case "6":
			return "Below 2.00";
		case "7":
			return "No Grading System/No Compatible Grading System";
		default:
			return "";
		}
	}
	
    /**
	* parseCurrentEmployment: it parses the Current Employment field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The Current Employment field.
	* 
	* {example} parseCurrentEmployment(""): "".
	*/
	public static String parseCurrentEmployment(String field) {
		switch (field){
		case "1":
			return "Full-time";
		case "2":
			return "Part-time";
		case "3":
			return "Seasonal";
		case "4":
			return "Not employed";
		default:
			return "";
		}
	}
	
    /**
	* parseProgramTime: it parses the Program Time field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The Program Time field.
	* 
	* {example} parseProgramTime(""): "".
	*/
	public static String parseProgramTime(String field) {
		StringBuilder stringBuilder = new StringBuilder();
		//Check string length
		if (field == null)
			return "";
		if (field.length() == 0)
			return "";
		
		//Parse newValue
		for(int i = 0; i < field.length(); i++){
			String temp = getProgramTimeValue(field.substring(i, i + 1));
			if (temp != ""){
				stringBuilder.append(temp);
				stringBuilder.append(";");
			}
		}
		return stringBuilder.toString();
	}
	
	private static String getProgramTimeValue(String field){
		switch (field){
		case "1":
			return "Full-time Day";
		case "2":
			return "Full-time Evening";
		case "3":
			return "Part-time Day";
		case "4":
			return "Part-time Evening";
		default:
			return "";
		}
	}
	
    /**
	* parseYearsOfFullTimeEmployment: it parses the Years of Full Time Employment field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The Years of Full Time Employment field.
	* 
	* {example} parseYearsOfFullTimeEmployment(""): "".
	*/
	public static String parseYearsOfFullTimeEmployment(String field) {
		switch (field){
		case "1":
			return "Less than two years";
		case "2":
			return "Two to four years";
		case "3":
			return "5 to 10 years";
		case "4":
			return "Over 10 years";
		default:
			return "";
		}
	}
	
	
	
    /**
	* parseClasseRank: it parses the Class Rank Time field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The Class Rank field.
	* 
	* {example} parseClasseRank(""): "".
	*/
	public static String parseClasseRank(String field) {
		switch (field){
		case "1":
			return "Top 5%";
		case "2":
			return "Top 10%";
		case "3":
			return "Top 20%";
		case "4":
			return "Top 30%";
		case "5":
			return "Top 40%";
		case "6":
			return "Top 50%";
		case "7":
			return "Below 50%";
		default:
			return "";
		}
	}
	
    /**
	* parseProgramType: it parses the Program Type field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The Program Type field.
	* 
	* {example} parseProgramType(""): "".
	*/
	public static String parseProgramType(String field) {
		String newValue = field;
		StringBuilder stringBuilder = new StringBuilder();
		//Check string length
		if (field == null)
			return "";
		if (field.length() == 0)
			return "";
		if (field.length() % 2 == 1){
			newValue = (new StringBuilder(field)).insert(0, '0').toString();
		}
		
		//Parse newValue
		for(int i = 0; i < newValue.length(); i = i + 2){
			String temp = getProgramTypeValue(newValue.substring(i, i + 2));
			if (temp != ""){
				stringBuilder.append(temp);
				stringBuilder.append(";");
			}
		}
		return stringBuilder.toString();
	}
	
	private static String getProgramTypeValue(String value){
		switch (value){
		case "01":
			return "Distance";
		case "02":
			return "Dual Degree";
		case "03":
			return "Executive LLM";
		case "04":
			return "On Campus";
		case "05":
			return "Online LLM";
		default:
			return "";
		}
	}
	
    /**
	* parseExpectedEntryYear: it parses the Expected Entry Year field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The Expected Entry Year field.
	* 
	* {example} parseExpectedEntryYear(""): "".
	*/
	public static String parseExpectedEntryYear(String field) {
		try{
			Integer num = Integer.valueOf(field);
			if (num >= 1 && num <= 96){
				return String.valueOf(2002 + num);
			}else if (num == 97){
				return "Uncertain When Applying";
			}else if (num == 98){
				return "Uncertain If Applying";
			}else if (num == 99){
				return "Not Applying";
			}
			return "";
		}catch(Exception e){
			return "";
		}
	}
	
    /**
	* parseStudentOrg: it parses the Student Organization field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The Student Organization field.
	* 
	* {example} parseStudentOrg(""): "".
	*/
	public static String parseStudentOrg(String field) {
		String newValue = field;
		StringBuilder stringBuilder = new StringBuilder();
		//Check string length
		if (field == null)
			return "";
		if (field.length() == 0)
			return "";
		if (field.length() % 2 == 1){
			newValue = (new StringBuilder(field)).insert(0, '0').toString();
		}
		
		//Parse newValue
		for(int i = 0; i < newValue.length(); i = i + 2){
			String temp = getStudentOrgValue(newValue.substring(i, i + 2));
			if (temp != ""){
				stringBuilder.append(temp);
				stringBuilder.append(";");
			}
		}
		return stringBuilder.toString();
	}
	
	private static String getStudentOrgValue(String value){
		switch (value){
		case "01":
			return "Asian American Law Students Association";
		case "02":
			return "Black Law Students Association";
		case "03":
			return "Catholic Law Students Association";
		case "04":
			return "Christian Legal Society/Law Students";
		case "05":
			return "Disabled Law Students Association";
		case "06":
			return "LGBT Law Students Association";
		case "07":
			return "Hispanic/Latino Law Students Association";
		case "08":
			return "Islamic Law Students Association";
		case "09":
			return "Jewish Law Students Association";
		case "10":
			return "Latter Day Saints Law Students Ass.";
		case "11":
			return "Middle Eastern Law Students Association";
		case "12":
			return "Minority Law Students Association";
		case "13":
			return "Native American Law Students Association";
		case "14":
			return "Non-traditional Aged Law Students Ass.";
		case "15":
			return "Pacific American Law Students Ass.";
		case "16":
			return "South Asian Law Students Association";
		case "17":
			return "Women’s Law Caucus/Student Ass./Coalition";
		default:
			return "";
		}	
	}

    /**
	* parseStudentOrg: it parses the State field.
	* 
	* 
	* {talendTypes} String
	* 
	* {Category} LSAC Parser
	* 
	* {param} string("1") input: The State field.
	* 
	* {example} parseState(""): "".
	*/
	public static String parseState(String field) {
		String newValue = field;
		StringBuilder stringBuilder = new StringBuilder();
		//Check string length
		if (field == null)
			return "";
		if (field.length() == 0)
			return "";
		if (field.length() % 2 == 1){
			newValue = (new StringBuilder(field)).insert(0, '0').toString();
		}
		
		//Parse newValue
		for(int i = 0; i < newValue.length(); i = i + 2){
			String temp = getStateValue(newValue.substring(i, i + 2));
			if (temp != ""){
				stringBuilder.append(temp);
				stringBuilder.append(";");
			}
		}
		return stringBuilder.toString();
	}
	
	private static String getStateValue(String value){
		switch(value){
		case "AL":
			return "Alabama";
		case "AK":
			return "Alaska";
		case "AB":
			return "Alberta";
		case "AS":
			return "American Samoa";
		case "AA":
			return "Americas Other than Canada";
		case "AZ":
			return "Arizona";
		case "AR":
			return "Arkansas";
		case "BC":
			return "British Columbia";
		case "CA":
			return "California";
		case "CO":
			return "Colorado";
		case "CT":
			return "Connecticut";
		case "DE":
			return "Delaware";
		case "DC":
			return "District of Columbia";
		case "AE":
			return "Europe-Mid East-Africa-Canada";
		case "FM":
			return "Federated States of Micronesia";
		case "FL":
			return "Florida";
		case "GA":
			return "Georgia";
		case "GU":
			return "Guam";
		case "HI":
			return "Hawaii";
		case "ID":
			return "Idaho";
		case "IL":
			return "Illinois";
		case "IN":
			return "Indiana";
		case "IA":
			return "Iowa";
		case "KS":
			return "Kansas";
		case "KY":
			return "Kentucky";
		case "LA":
			return "Louisiana";
		case "ME":
			return "Maine";
		case "MB":
			return "Manitoba";
		case "MH":
			return "Marshall Islands";
		case "MD":
			return "Maryland";
		case "MA":
			return "Massachusetts";
		case "MI":
			return "Michigan";
		case "MN":
			return "Minnesota";
		case "MS":
			return "Mississippi";
		case "MO":
			return "Missouri";
		case "MT":
			return "Montana";
		case "NE":
			return "Nebraska";
		case "NV":
			return "Nevada";
		case "NB":
			return "New Brunswick";
		case "NH":
			return "New Hampshire";
		case "NJ":
			return "New Jersey";
		case "NM":
			return "New Mexico";
		case "NY":
			return "New York";
		case "NF":
			return "Newfoundland";
		case "NC":
			return "North Carolina";
		case "ND":
			return "North Dakota";
		case "MP":
			return "Northern Mariana Is.";
		case "NS":
			return "Nova Scotia";
		case "NU":
			return "Nunavut";
		case "NT":
			return "NW Territories";
		case "OH":
			return "Ohio";
		case "OK":
			return "Oklahoma";
		case "ON":
			return "Ontario";
		case "OR":
			return "Oregon";
		case "AP":
			return "Pacific";
		case "PW":
			return "Palau";
		case "PA":
			return "Pennsylvania";
		case "PE":
			return "Prince Edward Island";
		case "PR":
			return "Puerto Rico";
		case "QC":
			return "Quebec";
		case "RI":
			return "Rhode Island";
		case "SK":
			return "Saskatchewan";
		case "SC":
			return "South Carolina";
		case "SD":
			return "South Dakota";
		case "TN":
			return "Tennessee";
		case "TX":
			return "Texas";
		case "UT":
			return "Utah";
		case "VT":
			return "Vermont";
		case "VI":
			return "Virgin Islands";
		case "VA":
			return "Virginia";
		case "WA":
			return "Washington";
		case "WV":
			return "West Virginia";
		case "WI":
			return "Wisconsin";
		case "WY":
			return "Wyoming";
		case "YT":
			return "Yukon Territory";
		default:
			return "";
		}
	}
}
